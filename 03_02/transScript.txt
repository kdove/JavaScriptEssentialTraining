- [Instructor] The data we store and use in variables in JavaScript falls into six primitive data types, three we use all the time, numeric, string, and Boolean, one we use occasionally, null, one fallback, undefined, and a new one introduced in ECMAScript 2015 called symbol, which we won't cover in this course. The numeric data type handles numbers. To store a numeric data type in a variable, simply assign a number to it. It can be any regular number, so one, two, three, 56, 3,847.

It can be 3.1492 etc. It can be negative number, so minus one or minus 10 or minus 56.39, or minus one hundred billion. Now technically there is a limit to how big the number can be, but it's ridiculously high, so for all intents and purposes, whatever number you put in a variable will work as a numeric data type. The string data type handles strings of letters and symbols, what we commonly refer to as words and sentences.

To store a string data type in a variable, wrap your string of text in straight quotation marks. You can use single or double quotes. Just make sure you use the same one at the beginning and at the end. You can place any symbol between these quotation marks, but when you use hyphens or quotes in your text, you have to be extra careful. If you use straight double quotes to denote the beginning and end of the string, and then use straight double quotes in the string as well, everything breaks because you're terminating the string early.

To fix this, you could use single straight quotes for the string, and double quotes inside, but that would just trigger the same problem with apostrophes. To resolve this problem properly, escape the string quotes by placing a backslash in front of each of them. This tells the browser, this straight quote is not part of the script. Treat it like regular text. And everything will be just fine. The Boolean data type handles the binary true/false. To store a Boolean data type in a variable, type in true or false without quotation marks.

These are JavaScript commands, and will be understood by the browser. The same goes for the null data type. The null data type is the intentional absence of an object value. So if we want a variable to be empty, but not undefined, you set its value to null, without quotation marks as well. The undefined data type is what you get when you create a variable but don't set it to anything. As you've learned, JavaScript is a weakly typed language, so the data types are applied when you set the content in a variable.

If you ever want to know what data type a variable has, you can use the typeof operator to find out. In the exercise files for this movie, 03_02, you'll find a bunch of variables. If you open the index.html file from the exercise files in the browser, open the console, and type in console.log, and then typeof, followed by the variable name, you'll get the data type for the content within that variable.

So we can say negInteger. This returns a number. Or we can say escQuote. This returns a string. We can say theSunIsWarm. That's a Boolean. emptyInside, that registers as an object. That is an error in the browser itself.

That is the null value, but it's treated like an object 'cause the browser doesn't understand 'cause there is literally nothing there, and finally, justAnotherVariable, which was undefined is undefined.